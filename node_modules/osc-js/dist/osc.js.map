{"version":3,"file":"osc.js","sources":["../src/common/utils.js","../src/common/helpers.js","../src/atomic.js","../src/atomic/int32.js","../src/atomic/float32.js","../src/atomic/string.js","../src/atomic/blob.js","../src/message.js","../src/atomic/timetag.js","../src/bundle.js","../src/packet.js","../src/events.js","../src/osc.js","../src/plugin/wsbrowser.js","../entry/osc.browser.js"],"sourcesContent":["/**\n * Check if given object is an integer number\n * @param {*} n\n * @return {boolean}\n */\nexport function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\n/**\n * Check if given object is a float number\n * @param {*} n\n * @return {boolean}\n */\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * Check if given object is a string\n * @param {*} n\n * @return {boolean}\n */\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\n/**\n * Check if given object is an array\n * @param {*} n\n * @return {boolean}\n */\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\n/**\n * Check if given object is an object\n * @param {*} n\n * @return {boolean}\n */\nexport function isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]'\n}\n\n/**\n * Check if given object is a function\n * @param {*} n\n * @return {boolean}\n */\nexport function isFunction(n) {\n  return typeof n === 'function'\n}\n\n/**\n * Check if given object is a Uint8Array\n * @param {*} n\n * @return {boolean}\n */\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\n/**\n * Check if given object is a Date\n * @param {*} n\n * @return {boolean}\n */\nexport function isDate(n) {\n  return n instanceof Date\n}\n\n/**\n * Check if given object is undefined\n * @param {*} n\n * @return {boolean}\n */\nexport function isUndefined(n) {\n  return typeof n === 'undefined'\n}\n\n/**\n * Return the next multiple of four\n * @param {number} n\n */\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n\n/**\n * Checks if environment provides a feature\n * @param {string} name Name of needed feature\n * @return {boolean}\n */\nexport function hasProperty(name) {\n  return Object.prototype.hasOwnProperty.call(\n    (typeof global !== 'undefined' ? global : window), // eslint-disable-line no-undef\n    name\n  )\n}\n\n/**\n * Wrap binary data in DataView\n * @param {*} obj\n * @return {DataView}\n */\nexport function dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer)\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj)\n  }\n\n  return new DataView(new Uint8Array(obj))\n}\n","import { isArray, isInt, isFloat, isString, isBlob } from './utils'\n\n/**\n * Checks type of given object and returns the regarding OSC\n * Type tag character\n * @param {*} item Any object\n * @return {string} OSC Type tag character\n */\nexport function typeTag(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  }\n\n  throw new Error('OSC typeTag() found unknown value type')\n}\n\n/**\n * Sanitizes an OSC-ready Address Pattern\n * @param {array|string} obj Address as string or array of strings\n * @return {string} Corrected address string\n *\n * @example\n * // all calls return '/test/path' string:\n * prepareAddress('test/path')\n * prepareAddress('/test/path/')\n * prepareAddress([test, path])\n */\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n\n    // remove slash at ending of address\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n\n    // add slash at beginning of address\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n\n    return address\n  }\n\n  throw new Error('OSC prepareAddress() needs addresses of type array or string')\n}\n\n/**\n * Make an OSC address pattern javascript-regex-ready\n * @param {string} str OSC address pattern\n * @return {string} Javascript RegEx string\n */\nexport function prepareRegExPattern(str) {\n  let pattern\n\n  if (!(isString(str))) {\n    throw new Error('OSC prepareRegExPattern() needs strings')\n  }\n\n  pattern = str.replace(/\\./g, '\\\\.')\n  pattern = pattern.replace(/\\(/g, '\\\\(')\n  pattern = pattern.replace(/\\)/g, '\\\\)')\n\n  pattern = pattern.replace(/\\{/g, '(')\n  pattern = pattern.replace(/\\}/g, ')')\n  pattern = pattern.replace(/,/g, '|')\n\n  pattern = pattern.replace(/\\[!/g, '[^')\n\n  pattern = pattern.replace(/\\?/g, '.')\n  pattern = pattern.replace(/\\*/g, '.*')\n\n  return pattern\n}\n\n/**\n * Holds a list of items and helps to merge them\n * into a single array of packed binary data\n */\nexport default class EncodeHelper {\n  /**\n   * Create a new EncodeHelper instance\n   */\n  constructor() {\n    /** @type {array} data */\n    this.data = []\n    /** @type {number} byteLength */\n    this.byteLength = 0\n  }\n\n  /**\n   * Packs an item and adds it to the list\n   * @param {*} item Any object\n   * @return {EncodeHelper}\n   */\n  add(item) {\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n\n    return this\n  }\n\n  /**\n   * Merge all added items into one Uint8Array\n   * @return {Uint8Array} Merged binary data array of all items\n   */\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n","import { isUndefined } from './common/utils'\n\n/**\n * Base class for OSC Atomic Data Types\n */\nexport default class Atomic {\n  /**\n   * Create an Atomic instance\n   * @param {*} [value] Initial value of any type\n   */\n  constructor(value) {\n    /** @type {*} value */\n    this.value = value\n    /** @type {number} offset */\n    this.offset = 0\n  }\n\n  /**\n   * Interpret the given value of this entity as packed binary data\n   * @param {string} method The DataView method to write to the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @return {Uint8Array} Packed binary data\n   */\n  pack(method, byteLength) {\n    if (!(method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength')\n    }\n\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (isUndefined(this.value)) {\n      throw new Error('OSC Atomic cant\\'t be encoded with empty value')\n    }\n\n    // use DataView to write to ArrayBuffer\n    dataView[method](this.offset, this.value, false)\n\n    // always return binary Uint8Array after packing\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView according to the given format\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {string} method The DataView method to read the format from the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, method, byteLength, initialOffset = 0) {\n    if (!(dataView && method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength')\n    }\n\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Atomic expects an instance of type DataView')\n    }\n\n    // use DataView to read from ArrayBuffer and add offset\n    this.value = dataView[method](initialOffset, false)\n    this.offset = initialOffset + byteLength\n\n    // always return offset number after unpacking\n    return this.offset\n  }\n}\n","import { isInt } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt32 extends Atomic {\n  /**\n   * Create an AtomicInt32 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, initialOffset)\n  }\n}\n","import { isFloat } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat32 extends Atomic {\n  /**\n   * Create an AtomicFloat32 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isFloat(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, initialOffset)\n  }\n}\n","import { pad, isString, isUndefined, hasProperty } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** Slice size of large strings for fallback method */\nconst STR_SLICE_SIZE = 65537\n\n/** Text encoding format */\nconst STR_ENCODING = 'utf-8'\n\n/**\n * Helper method to decode a string using different methods depending on environment\n * @param {array} charCodes Array of char codes\n * @return {string} Decoded string\n */\nfunction charCodesToString(charCodes) {\n  // Use these methods to be able to convert large strings\n  if (hasProperty('Buffer')) {\n    return Buffer.from(charCodes).toString(STR_ENCODING)\n  } else if (hasProperty('TextDecoder')) {\n    return new TextDecoder(STR_ENCODING) // eslint-disable-line no-undef\n      .decode(new Int8Array(charCodes))\n  }\n\n  // Fallback method\n  let str = ''\n\n  for (let i = 0; i < charCodes.length; i += STR_SLICE_SIZE) {\n    str += String.fromCharCode.apply(\n      null,\n      charCodes.slice(i, i + STR_SLICE_SIZE)\n    )\n  }\n\n  return str\n}\n\n/**\n * A sequence of non-null ASCII characters OSC Atomic Data Type\n */\nexport default class AtomicString extends Atomic {\n  /**\n   * Create an AtomicString instance\n   * @param {string} [value] Initial string value\n   */\n  constructor(value) {\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given string as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicString can not be encoded with empty value')\n    }\n\n    // add 0-3 null characters for total number of bits a multiple of 32\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  /**\n   * Unpack binary data from DataView and read a string\n   * @param {DataView} dataView The DataView holding the binary representation of the string\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicString expects an instance of type DataView')\n    }\n\n    let offset = initialOffset\n    let charcode\n    const charCodes = []\n\n    for (; offset < dataView.byteLength; offset += 1) {\n      charcode = dataView.getUint8(offset)\n\n      // check for terminating null character\n      if (charcode !== 0) {\n        charCodes.push(charcode)\n      } else {\n        offset += 1\n        break\n      }\n    }\n\n    if (offset === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string')\n    }\n\n    /** @type {number} offset */\n    this.offset = pad(offset)\n    /** @type {string} value */\n    this.value = charCodesToString(charCodes)\n\n    return this.offset\n  }\n}\n","import { pad, isBlob, isUndefined } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 8-bit bytes of arbitrary binary data OSC Atomic Data Type\n */\nexport default class AtomicBlob extends Atomic {\n  /**\n   * Create an AtomicBlob instance\n   * @param {Uint8Array} [value] Binary data\n   */\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given blob as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    // an int32 size count\n    dataView.setInt32(0, this.value.byteLength, false)\n    // followed by 8-bit bytes of arbitrary binary data\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a blob\n   * @param {DataView} dataView The DataView holding the binary representation of the blob\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicBlob expects an instance of type DataView')\n    }\n\n    const byteLength = dataView.getInt32(initialOffset, false)\n\n    /** @type {Uint8Array} value */\n    this.value = new Uint8Array(dataView.buffer, initialOffset + 4, byteLength)\n    /** @type {number} offset */\n    this.offset = pad(initialOffset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n","import {\n  isArray,\n  isBlob,\n  isFloat,\n  isInt,\n  isString,\n  isUndefined,\n} from './common/utils'\n\nimport Helper, { typeTag, prepareAddress } from './common/helpers'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicString from './atomic/string'\nimport AtomicBlob from './atomic/blob'\n\n/**\n * An OSC message consists of an OSC Address Pattern followed\n * by an OSC Type Tag String followed by zero or more OSC Arguments\n */\nexport default class Message {\n  /**\n   * Create a Message instance\n   * @param {array|string} args Address\n   * @param {...*} args OSC Atomic Data Types\n   *\n   * @example\n   * const message = new Message(['test', 'path'], 50, 100.52, 'test')\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {string} address */\n    this.address = ''\n    /** @type {string} types */\n    this.types = ''\n    /** @type {array} args */\n    this.args = []\n\n    if (args.length > 0) {\n      if (!(isString(args[0]) || isArray(args[0]))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array')\n      }\n\n      this.address = prepareAddress(args.shift())\n      this.types = args.map(item => typeTag(item)).join('')\n      this.args = args\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {*} item\n   */\n  add(item) {\n    if (isUndefined(item)) {\n      throw new Error('OSC Message needs a valid OSC Atomic Data Type')\n    }\n\n    this.args.push(item)\n    this.types += typeTag(item)\n  }\n\n  /**\n   * Interpret the Message as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message has an invalid address')\n    }\n\n    const encoder = new Helper()\n\n    // OSC Address Pattern and Type string\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    // followed by zero or more OSC Arguments\n    if (this.args.length > 0) {\n      let argument\n\n      this.args.forEach((value) => {\n        if (isInt(value)) {\n          argument = new AtomicInt32(value)\n        } else if (isFloat(value)) {\n          argument = new AtomicFloat32(value)\n        } else if (isString(value)) {\n          argument = new AtomicString(value)\n        } else if (isBlob(value)) {\n          argument = new AtomicBlob(value)\n        } else {\n          throw new Error('OSC Message found unknown argument type')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Message\n   * @param {DataView} dataView The DataView holding the binary representation of a Message\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Message expects an instance of type DataView.')\n    }\n\n    // read address pattern\n    const address = new AtomicString()\n    address.unpack(dataView, initialOffset)\n\n    // read type string\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string')\n    }\n\n    let { offset } = types\n    let next\n    let type\n\n    const args = []\n\n    // read message arguments (OSC Atomic Data Types)\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else {\n        throw new Error('OSC Message found non-standard argument type')\n      }\n\n      offset = next.unpack(dataView, offset)\n      args.push(next.value)\n    }\n\n    this.offset = offset\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n","import { isInt, isDate, isUndefined } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** 70 years in seconds */\nexport const SECONDS_70_YEARS = 2208988800\n/** 2^32 */\nexport const TWO_POWER_32 = 4294967296\n\n/**\n * Timetag helper class for representing NTP timestamps\n * and conversion between them and javascript representation\n */\nexport class Timetag {\n  /**\n   * Create a Timetag instance\n   * @param {number} [seconds=0] Initial NTP *seconds* value\n   * @param {number} [fractions=0] Initial NTP *fractions* value\n   */\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number')\n    }\n\n    /** @type {number} seconds */\n    this.seconds = seconds\n    /** @type {number} fractions */\n    this.fractions = fractions\n  }\n\n  /**\n   * Converts from NTP to JS representation and back\n   * @param {number} [milliseconds] Converts from JS milliseconds to NTP.\n   * Leave empty for converting from NTP to JavaScript representation\n   * @return {number} Javascript timestamp\n   */\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + Math.round(this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\n/**\n * 64-bit big-endian fixed-point time tag, semantics\n * defined below OSC Atomic Data Type\n */\nexport default class AtomicTimetag extends Atomic {\n  /**\n   * Create a AtomicTimetag instance\n   * @param {number|Timetag|Date} [value] Initial date, leave empty if\n   * you want it to be the current date\n   */\n  constructor(value = Date.now()) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    }\n\n    super(timetag)\n  }\n\n  /**\n   * Interpret the given timetag as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a timetag\n   * @param {DataView} dataView The DataView holding the binary representation of the timetag\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicTimetag expects an instance of type DataView')\n    }\n\n    const seconds = dataView.getUint32(initialOffset, false)\n    const fractions = dataView.getUint32(initialOffset + 4, false)\n\n    /** @type {Timetag} value */\n    this.value = new Timetag(seconds, fractions)\n    /** @type {number} offset */\n    this.offset = initialOffset + 8\n\n    return this.offset\n  }\n}\n","import { isArray, isInt } from './common/utils'\nimport EncodeHelper from './common/helpers'\n\nimport Packet from './packet'\nimport Message from './message'\nimport AtomicString from './atomic/string'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicTimetag from './atomic/timetag'\n\n/** OSC Bundle string */\nexport const BUNDLE_TAG = '#bundle'\n\n/**\n * An OSC Bundle consist of a Timetag and one or many Bundle Elements.\n * The elements are either OSC Messages or more OSC Bundles\n */\nexport default class Bundle {\n  /**\n   * Create a Bundle instance\n   * @param {...*} [args] Timetag and elements. See examples for options\n   *\n   * @example\n   * const bundle = new Bundle(new Date() + 500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherBundle = new Bundle([message], Date.now() + 1500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherMessage = new Message('/test/message', 'test', 12)\n   * const anotherBundle = new Bundle(message, anotherMessage)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {AtomicTimetag} timetag */\n    this.timetag = new AtomicTimetag()\n    /** @type {array} bundleElements */\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      // first argument is an Date or js timestamp (number)\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0])\n      } else if (isArray(args[0])) {\n        // first argument is an Array of Bundle elements\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        // second argument is an Date or js timestamp (number)\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[0]))) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        // take all arguments as Bundle elements\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  /**\n   * Take a JavaScript timestamp to set the Bundle's timetag\n   * @param {number} ms JS timestamp in milliseconds\n   *\n   * @example\n   * const bundle = new Bundle()\n   * bundle.timestamp(Date.now() + 5000) // in 5 seconds\n   */\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an integer for setting the timestamp')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  /**\n   * Add a Message or Bundle to the list of elements\n   * @param {Bundle|Message} item\n   */\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  /**\n   * Interpret the Bundle as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    const encoder = new EncodeHelper()\n\n    // an OSC Bundle consists of the OSC-string \"#bundle\"\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    // followed by an OSC Time Tag\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    // followed by zero or more OSC Bundle Elements\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Bundle\n   * @param {DataView} dataView The DataView holding the binary representation of a Bundle\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Bundle expects an instance of type DataView')\n    }\n\n    // read the beginning bundle string\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    if (head.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head')\n    }\n\n    // read the timetag\n    const timetag = new AtomicTimetag()\n    let offset = timetag.unpack(dataView, head.offset)\n\n    // read the bundle elements\n    this.bundleElements = []\n\n    while (offset < dataView.byteLength) {\n      const packet = new Packet()\n      const size = new AtomicInt32()\n\n      offset = size.unpack(dataView, offset)\n      offset = packet.unpack(dataView, offset, this.timetag)\n\n      this.bundleElements.push(packet.value)\n    }\n\n    this.offset = offset\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n","import Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\nimport AtomicString from './atomic/string'\n\n/**\n * The unit of transmission of OSC is an OSC Packet. The contents\n * of an OSC packet must be either an OSC Message or an OSC Bundle\n */\nexport default class Packet {\n  /**\n   * Create a Packet instance holding a Message or Bundle\n   * @param {Message|Bundle} [value] Initial Packet value\n   */\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle')\n    }\n\n    /** @type {Message|Bundle} value */\n    this.value = value\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Packs the Packet value. This implementation is more like\n   * a wrapper due to OSC specifications, you could also skip the\n   * Packet and directly work with the Message or Bundle instance\n   * @return {Uint8Array} Packed binary data\n   *\n   * @example\n   * const message = new Message('/test/path', 21.5, 'test')\n   * const packet = new Packet(message)\n   * const packetBinary = packet.pack() // then send it via udp etc.\n   *\n   * // or skip the Packet for convenience\n   * const messageBinary = message.pack()\n   */\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body')\n    }\n\n    return this.value.pack()\n  }\n\n  /**\n   * Unpack binary data from DataView to read Messages or Bundles\n   * @param {DataView} dataView The DataView holding a binary representation of a Packet\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Packet expects an instance of type DataView')\n    }\n\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    let item\n\n    // check if Packet is a Bundle or a Message\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n    }\n\n    item.unpack(dataView, initialOffset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n","import { isArray, isString, isInt, isFunction, dataView } from './common/utils'\nimport { prepareAddress, prepareRegExPattern } from './common/helpers'\n\nimport Packet from './packet'\nimport Bundle from './bundle'\nimport Message from './message'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * EventHandler to notify listeners on matching OSC messages and\n * status changes of plugins\n */\nexport default class EventHandler {\n  /**\n   * Create an EventHandler instance\n   * @param {object} options Custom options\n   */\n  constructor(options) {\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, options)\n    /**\n     * @type {array} addressHandlers\n     * @private\n     */\n    this.addressHandlers = []\n    /**\n     * @type {object} eventHandlers\n     * @private\n     */\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: [],\n    }\n    /**\n     * @type {number} uuid\n     * @private\n     */\n    this.uuid = 0\n  }\n\n  /**\n   * Internally used method to dispatch OSC Packets. Extracts\n   * given Timetags and dispatches them accordingly\n   * @param {Packet} packet\n   * @return {boolean} Success state\n   * @private\n   */\n  dispatch(packet) {\n    if (!(packet instanceof Packet)) {\n      throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet')\n    }\n\n    if (!packet.value) {\n      throw new Error('OSC EventHander dispatch() can\\'t read empty Packets')\n    }\n\n    if (packet.value instanceof Bundle) {\n      const bundle = packet.value\n\n      return bundle.bundleElements.forEach((bundleItem) => {\n        if (bundleItem instanceof Bundle) {\n          if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n            throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles')\n          }\n          return this.dispatch(bundleItem)\n        } else if (bundleItem instanceof Message) {\n          const message = bundleItem\n          return this.notify(\n            message.address,\n            message,\n            bundle.timetag.value.timestamp()\n          )\n        }\n\n        throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n      })\n    } else if (packet.value instanceof Message) {\n      const message = packet.value\n      return this.notify(message.address, message)\n    }\n\n    throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n  }\n\n  /**\n   * Internally used method to invoke listener callbacks. Uses regular\n   * expression pattern matching for OSC addresses\n   * @param {string} name OSC address or event name\n   * @param {*} [data] The data of the event\n   * @return {boolean} Success state\n   * @private\n   */\n  call(name, data) {\n    let success = false\n\n    // call event handlers\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].forEach((handler) => {\n        handler.callback(data)\n        success = true\n      })\n\n      return success\n    }\n\n    // call address handlers\n    const handlerKeys = Object.keys(this.addressHandlers)\n    const handlers = this.addressHandlers\n\n    handlerKeys.forEach((key) => {\n      const regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g')\n      const test = regex.test(key)\n\n      // found a matching address in our callback handlers\n      if (test && key.length === regex.lastIndex) {\n        handlers[key].forEach((handler) => {\n          handler.callback(data)\n          success = true\n        })\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Notify the EventHandler of incoming OSC messages or status\n   * changes (*open*, *close*, *error*). Handles OSC address patterns\n   * and executes timed messages. Use binary arrays when\n   * handling directly incoming network data. Packet's or Messages can\n   * also be used\n   * @param {...*} args\n   * The OSC address pattern / event name as string}. For convenience and\n   * Plugin API communication you can also use Message or Packet instances\n   * or ArrayBuffer, Buffer instances (low-level access). The latter will\n   * automatically be unpacked\n   * When using a string you can also pass on data as a second argument\n   * (any type). All regarding listeners will be notified with this data.\n   * As a third argument you can define a javascript timestamp (number or\n   * Date instance) for timed notification of the listeners.\n   * @return {boolean} Success state of notification\n   *\n   * @example\n   * const socket = dgram.createSocket('udp4')\n   * socket.on('message', (message) => {\n   *   this.notify(message)\n   * })\n   *\n   * @example\n   * this.notify('error', error.message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * this.notify(message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * // override timestamp\n   * this.notify(message.address, message, Date.now() + 5000)\n   */\n  notify(...args) {\n    if (args.length === 0) {\n      throw new Error('OSC EventHandler can not be called without any argument')\n    }\n\n    // check for incoming dispatchable OSC data\n    if (args[0] instanceof Packet) {\n      return this.dispatch(args[0])\n    } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n      return this.dispatch(new Packet(args[0]))\n    } else if (!isString(args[0])) {\n      const packet = new Packet()\n      packet.unpack(dataView(args[0]))\n      return this.dispatch(packet)\n    }\n\n    const name = args[0]\n\n    // data argument\n    let data = null\n\n    if (args.length > 1) {\n      data = args[1]\n    }\n\n    // timestamp argument\n    let timestamp = null\n\n    if (args.length > 2) {\n      if (isInt(args[2])) {\n        timestamp = args[2]\n      } else if (args[2] instanceof Date) {\n        timestamp = args[2].getTime()\n      } else {\n        throw new Error('OSC EventHandler timestamp has to be a number or Date')\n      }\n    }\n\n    // notify now or later\n    if (timestamp) {\n      const now = Date.now()\n\n      // is message outdated?\n      if (now > timestamp) {\n        if (!this.options.discardLateMessages) {\n          return this.call(name, data)\n        }\n      }\n\n      // notify later\n      const that = this\n\n      setTimeout(() => {\n        that.call(name, data)\n      }, timestamp - now)\n\n      return true\n    }\n\n    return this.call(name, data)\n  }\n\n  /**\n   * Subscribe to a new address or event you want to listen to\n   * @param {string} name The OSC address or event name\n   * @param {function} callback Callback function on notification\n   * @return {number} Subscription identifier (needed to unsubscribe)\n   */\n  on(name, callback) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('OSC EventHandler callback has to be a function')\n    }\n\n    // get next id\n    this.uuid += 1\n\n    // prepare handler\n    const handler = {\n      id: this.uuid,\n      callback,\n    }\n\n    // register event listener\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].push(handler)\n      return this.uuid\n    }\n\n    // register address listener\n    const address = prepareAddress(name)\n    const regex = new RegExp(/[#*\\s[\\],/{}|?]/g)\n\n    if (regex.test(address.split('/').join(''))) {\n      throw new Error('OSC EventHandler address string contains invalid characters')\n    }\n\n    if (!(address in this.addressHandlers)) {\n      this.addressHandlers[address] = []\n    }\n\n    this.addressHandlers[address].push(handler)\n\n    return this.uuid\n  }\n\n  /**\n   * Unsubscribe listener from event notification or address handler\n   * @param {string} name The OSC address or event name\n   * @param {number} subscriptionId Subscription id to identify the handler\n   * @return {boolean} Success state\n   */\n  off(name, subscriptionId) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isInt(subscriptionId)) {\n      throw new Error('OSC EventHandler subscription id has to be a number')\n    }\n\n    let key\n    let haystack\n\n    // event or address listener\n    if (isString(name) && name in this.eventHandlers) {\n      key = name\n      haystack = this.eventHandlers\n    } else {\n      key = prepareAddress(name)\n      haystack = this.addressHandlers\n    }\n\n    // remove the entry\n    if (key in haystack) {\n      return haystack[key].some((item, index) => {\n        if (item.id === subscriptionId) {\n          haystack[key].splice(index, 1)\n          return true\n        }\n\n        return false\n      })\n    }\n\n    return false\n  }\n}\n","import { isObject, isString, isFunction, isInt } from './common/utils'\n\nimport Packet from './packet'\nimport Bundle from './bundle'\nimport Message from './message'\n\nimport EventHandler from './events'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  plugin: null,\n  discardLateMessages: false,\n}\n\n/**\n * Status flags\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * OSC interface to send OSC Packets and to listen to status-changes and\n * incoming message events. Offers a Plugin API for different network\n * protocols, defaults to a simple Websocket client for OSC communication\n * between a browser js-app and a js-node server\n *\n * @example\n * const osc = new OSC()\n *\n * osc.on('/input/test', (message) => {\n *   // print incoming OSC message arguments\n *   console.log(message.args)\n * })\n *\n * osc.on('open', () => {\n *   const message = new Message('/test/path', 55.12, 'hello')\n *   osc.send(message)\n * })\n *\n * osc.open({ host: '192.168.178.115', port: 9012 })\n */\nclass OSC {\n  /**\n   * Create an OSC instance with given options\n   * @param {object} [options] Custom options\n   * @param {boolean} [options.discardLateMessages=false] Ignore incoming\n   * messages when given timetag lies in the past\n   * @param {Plugin} [options.plugin=WebsocketClientPlugin] Add a connection plugin\n   * to this interface, defaults to a plugin with Websocket client.\n   * Open README.md for further information on how to handle plugins or\n   * how to write your own with the Plugin API\n   *\n   * @example\n   * const osc = new OSC() // default options with Websocket client\n   *\n   * @example\n   * const osc = new OSC({ discardLateMessages: true })\n   *\n   * @example\n   * const websocketPlugin = new OSC.WebsocketClientPlugin()\n   * const osc = new OSC({ plugin: websocketPlugin })\n   */\n  constructor(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, options)\n    /**\n     * @type {EventHandler} eventHandler\n     * @private\n     */\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages,\n    })\n\n    // pass EventHandler's notify() to plugin\n    const { eventHandler } = this\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify((...args) => eventHandler.notify(...args))\n    }\n  }\n\n  /**\n   * Listen to a status-change event or incoming OSC message with\n   * address pattern matching\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {function} callback Function which is called on notification\n   * @return {number} Subscription id (needed to unsubscribe)\n   *\n   * @example\n   * // will be called when server receives /in!trument/* for example\n   * osc.on('/instrument/1', (message) => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called on network socket error\n   * osc.on('error', (message) => {\n   *   console.log(message)\n   * })\n   */\n  on(eventName, callback) {\n    if (!(isString(eventName) && isFunction(callback))) {\n      throw new Error('OSC on() needs event- or address string and callback function')\n    }\n\n    return this.eventHandler.on(eventName, callback)\n  }\n\n  /**\n   * Unsubscribe an event listener\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {number} subscriptionId The subscription id\n   * @return {boolean} Success state\n   *\n   * @example\n   * const listenerId = osc.on('error', (message) => {\n   *   console.log(message)\n   * })\n   * osc.off('error', listenerId) // unsubscribe from error event\n   */\n  off(eventName, subscriptionId) {\n    if (!(isString(eventName) && isInt(subscriptionId))) {\n      throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe')\n    }\n\n    return this.eventHandler.off(eventName, subscriptionId)\n  }\n\n  /**\n   * Open network socket with plugin. This method is used by\n   * plugins and is not available without (see Plugin API for more information)\n   * @param {object} [options] Custom global options for plugin instance\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   */\n  open(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC open() options argument needs to be an object')\n    }\n\n    if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n      throw new Error('OSC Plugin API #open is not implemented!')\n    }\n\n    return this.options.plugin.open(options)\n  }\n\n  /**\n   * Returns the current status of the connection. See *STATUS* for\n   * different possible states. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @return {number} Status identifier\n   *\n   * @example\n   * import OSC, { STATUS } from 'osc'\n   * const osc = new OSC()\n   * if (osc.status() === STATUS.IS_CONNECTING) {\n   *   // do something\n   * }\n   */\n  status() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n      throw new Error('OSC Plugin API #status is not implemented!')\n    }\n\n    return this.options.plugin.status()\n  }\n\n  /**\n   * Close connection. This method is used by plugins and is not\n   * available without (see Plugin API for more information)\n   */\n  close() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n      throw new Error('OSC Plugin API #close is not implemented!')\n    }\n\n    return this.options.plugin.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @param {Packet|Bundle|Message} packet OSC Packet, Bundle or Message instance\n   * @param {object} [options] Custom options\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   *\n   * const message = new OSC.Message('/test/path', 55.1, 57)\n   * osc.send(message)\n   *\n   * // send message again to custom address\n   * osc.send(message, { host: '192.168.178.115', port: 9001 })\n   */\n  send(packet, options) {\n    if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n      throw new Error('OSC Plugin API #send is not implemented!')\n    }\n\n    if (!(packet instanceof Message || packet instanceof Bundle || packet instanceof Packet)) {\n      throw new Error('OSC send() needs Messages, Bundles or Packets')\n    }\n\n    if (options && !isObject(options)) {\n      throw new Error('OSC send() options argument has to be an object')\n    }\n\n    return this.options.plugin.send(packet.pack(), options)\n  }\n}\n\n// expose status flags\nOSC.STATUS = STATUS\n\n// expose OSC classes\nOSC.Packet = Packet\nOSC.Bundle = Bundle\nOSC.Message = Message\n\nexport default OSC\n","import { hasProperty } from '../common/utils'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n  secure: false,\n}\n\n/**\n * OSC plugin for a Websocket client running in only browser contexts\n */\nexport default class WebsocketBrowserPlugin {\n  /**\n   * Create an OSC WebsocketBrowserPlugin instance with given options.\n   * Defaults to *localhost:8080* for connecting to a Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {boolean} [options.secure=false] Use wss:// for secure connections\n   *\n   * @example\n   * const plugin = new OSC.WebsocketBrowserPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions) {\n    if (!hasProperty('WebSocket')) { // eslint-disable-line no-undef\n      throw new Error('WebsocketBrowserPlugin can\\'t find a WebSocket class')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, customOptions)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Connect to a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   * @param {boolean} [customOptions.secure] Use wss:// for secure connections\n   */\n  open(customOptions = {}) {\n    const options = Object.assign({}, this.options, customOptions)\n    const { port, host, secure } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket client\n    const protocol = secure ? 'wss' : 'ws'\n    this.socket = new WebSocket(`${protocol}://${host}:${port}`) // eslint-disable-line no-undef\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.onopen = () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    }\n\n    this.socket.onclose = () => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    }\n\n    this.socket.onerror = (error) => {\n      this.notify('error', error)\n    }\n\n    this.socket.onmessage = (message) => {\n      this.notify(message.data)\n    }\n  }\n\n  /**\n   * Close Websocket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket server\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.send(binary)\n  }\n}\n","import OSCBase from '../src/osc'\n\nimport WebsocketBrowserPlugin from '../src/plugin/wsbrowser'\n\nconst defaultOptions = {\n  plugin: new WebsocketBrowserPlugin(),\n}\n\nclass OSC extends OSCBase {\n  constructor(options) {\n    super(Object.assign({}, defaultOptions, options))\n  }\n}\n\nOSC.WebsocketBrowserPlugin = WebsocketBrowserPlugin\n\nexport default OSC\n"],"names":["isInt","n","Number","isFloat","isString","isArray","Object","prototype","toString","call","isObject","isFunction","isBlob","Uint8Array","isDate","Date","isUndefined","pad","hasProperty","name","hasOwnProperty","global","window","dataView","obj","buffer","DataView","ArrayBuffer","typeTag","item","Error","prepareAddress","address","join","length","slice","prepareRegExPattern","str","pattern","replace","EncodeHelper","data","byteLength","pack","push","result","offset","forEach","set","Atomic","value","method","initialOffset","AtomicInt32","AtomicFloat32","STR_SLICE_SIZE","STR_ENCODING","charCodesToString","charCodes","Buffer","from","TextDecoder","decode","Int8Array","i","String","fromCharCode","apply","AtomicString","terminated","charCodeAt","charcode","getUint8","AtomicBlob","setInt32","getInt32","Message","types","args","shift","map","encoder","Helper","add","argument","merge","unpack","next","type","SECONDS_70_YEARS","TWO_POWER_32","Timetag","seconds","fractions","milliseconds","rounded","Math","floor","round","AtomicTimetag","now","timetag","timestamp","getTime","getUint32","BUNDLE_TAG","Bundle","bundleElements","ms","head","packet","Packet","size","defaultOptions","EventHandler","options","assign","addressHandlers","eventHandlers","uuid","bundle","bundleItem","dispatch","message","notify","success","handler","callback","handlerKeys","keys","handlers","key","regex","RegExp","test","lastIndex","discardLateMessages","that","split","subscriptionId","haystack","some","index","id","splice","STATUS","OSC","eventHandler","plugin","registerNotify","eventName","on","off","open","status","close","send","WebsocketBrowserPlugin","customOptions","socket","socketStatus","IS_NOT_INITIALIZED","fn","port","host","secure","protocol","WebSocket","binaryType","IS_CONNECTING","onopen","IS_OPEN","onclose","IS_CLOSED","onerror","error","onmessage","IS_CLOSING","binary","OSCBase"],"mappings":";;;;;;AAKO,SAASA,KAAT,CAAeC,CAAf,EAAkB;SAChBC,OAAOD,CAAP,MAAcA,CAAd,IAAmBA,IAAI,CAAJ,KAAU,CAApC;;AAQF,AAAO,SAASE,OAAT,CAAiBF,CAAjB,EAAoB;SAClBC,OAAOD,CAAP,MAAcA,CAAd,IAAmBA,IAAI,CAAJ,KAAU,CAApC;;AAQF,AAAO,SAASG,QAAT,CAAkBH,CAAlB,EAAqB;SACnB,OAAOA,CAAP,KAAa,QAApB;;AAQF,AAAO,SAASI,OAAT,CAAiBJ,CAAjB,EAAoB;SAClBK,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,CAA/B,MAAsC,gBAA7C;;AAQF,AAAO,SAASS,QAAT,CAAkBT,CAAlB,EAAqB;SACnBK,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,CAA/B,MAAsC,iBAA7C;;AAQF,AAAO,SAASU,UAAT,CAAoBV,CAApB,EAAuB;SACrB,OAAOA,CAAP,KAAa,UAApB;;AAQF,AAAO,SAASW,MAAT,CAAgBX,CAAhB,EAAmB;SACjBA,aAAaY,UAApB;;AAQF,AAAO,SAASC,MAAT,CAAgBb,CAAhB,EAAmB;SACjBA,aAAac,IAApB;;AAQF,AAAO,SAASC,WAAT,CAAqBf,CAArB,EAAwB;SACtB,OAAOA,CAAP,KAAa,WAApB;;AAOF,AAAO,SAASgB,GAAT,CAAahB,CAAb,EAAgB;SACbA,IAAI,CAAL,GAAU,CAAC,IAAlB;;AAQF,AAAO,SAASiB,WAAT,CAAqBC,IAArB,EAA2B;SACzBb,OAAOC,SAAP,CAAiBa,cAAjB,CAAgCX,IAAhC,CACJ,OAAOY,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MADrC;MAAA,CAAP;;AAWF,AAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;MACxBA,IAAIC,MAAR,EAAgB;WACP,IAAIC,QAAJ,CAAaF,IAAIC,MAAjB,CAAP;GADF,MAEO,IAAID,eAAeG,WAAnB,EAAgC;WAC9B,IAAID,QAAJ,CAAaF,GAAb,CAAP;;SAGK,IAAIE,QAAJ,CAAa,IAAIb,UAAJ,CAAeW,GAAf,CAAb,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGK,SAASI,OAAT,CAAiBC,IAAjB,EAAuB;MACxB7B,MAAM6B,IAAN,CAAJ,EAAiB;WACR,GAAP;GADF,MAEO,IAAI1B,QAAQ0B,IAAR,CAAJ,EAAmB;WACjB,GAAP;GADK,MAEA,IAAIzB,SAASyB,IAAT,CAAJ,EAAoB;WAClB,GAAP;GADK,MAEA,IAAIjB,OAAOiB,IAAP,CAAJ,EAAkB;WAChB,GAAP;;QAGI,IAAIC,KAAJ,CAAU,wCAAV,CAAN;;AAcF,AAAO,SAASC,cAAT,CAAwBP,GAAxB,EAA6B;MAC9BQ,UAAU,EAAd;MAEI3B,QAAQmB,GAAR,CAAJ,EAAkB;iBACLA,IAAIS,IAAJ,CAAS,GAAT,CAAX;GADF,MAEO,IAAI7B,SAASoB,GAAT,CAAJ,EAAmB;cACdA,GAAV;QAGIQ,QAAQE,MAAR,GAAiB,CAAjB,IAAsBF,QAAQA,QAAQE,MAAR,GAAiB,CAAzB,MAAgC,GAA1D,EAA+D;gBACnDF,QAAQG,KAAR,CAAc,CAAd,EAAiBH,QAAQE,MAAR,GAAiB,CAAlC,CAAV;;QAIEF,QAAQE,MAAR,GAAiB,CAAjB,IAAsBF,QAAQ,CAAR,MAAe,GAAzC,EAA8C;sBAC9BA,OAAd;;WAGKA,OAAP;;QAGI,IAAIF,KAAJ,CAAU,8DAAV,CAAN;;AAQF,AAAO,SAASM,mBAAT,CAA6BC,GAA7B,EAAkC;MACnCC,gBAAJ;MAEI,CAAElC,SAASiC,GAAT,CAAN,EAAsB;UACd,IAAIP,KAAJ,CAAU,yCAAV,CAAN;;YAGQO,IAAIE,OAAJ,CAAY,KAAZ,EAAmB,KAAnB,CAAV;YACUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,KAAvB,CAAV;YACUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,KAAvB,CAAV;YAEUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,CAAV;YACUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,CAAV;YACUD,QAAQC,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,CAAV;YAEUD,QAAQC,OAAR,CAAgB,MAAhB,EAAwB,IAAxB,CAAV;YAEUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,GAAvB,CAAV;YACUD,QAAQC,OAAR,CAAgB,KAAhB,EAAuB,IAAvB,CAAV;SAEOD,OAAP;;IAOmBE;0BAIL;;SAEPC,IAAL,GAAY,EAAZ;SAEKC,UAAL,GAAkB,CAAlB;;;;wBAQEb,MAAM;UACFJ,SAASI,KAAKc,IAAL,EAAf;WACKD,UAAL,IAAmBjB,OAAOiB,UAA1B;WACKD,IAAL,CAAUG,IAAV,CAAenB,MAAf;aAEO,IAAP;;;;4BAOM;UACAoB,SAAS,IAAIhC,UAAJ,CAAe,KAAK6B,UAApB,CAAf;UACII,SAAS,CAAb;WAEKL,IAAL,CAAUM,OAAV,CAAkB,UAACN,IAAD,EAAU;eACnBO,GAAP,CAAWP,IAAX,EAAiBK,MAAjB;kBACUL,KAAKC,UAAf;OAFF;aAKOG,MAAP;;;;;;ICzHiBI;kBAKPC,KAAZ,EAAmB;;SAEZA,KAAL,GAAaA,KAAb;SAEKJ,MAAL,GAAc,CAAd;;;;yBASGK,QAAQT,YAAY;UACnB,EAAES,UAAUT,UAAZ,CAAJ,EAA6B;cACrB,IAAIZ,KAAJ,CAAU,iEAAV,CAAN;;UAGIW,OAAO,IAAI5B,UAAJ,CAAe6B,UAAf,CAAb;UACMnB,cAAW,IAAIG,QAAJ,CAAae,KAAKhB,MAAlB,CAAjB;UAEIT,YAAY,KAAKkC,KAAjB,CAAJ,EAA6B;cACrB,IAAIpB,KAAJ,CAAU,gDAAV,CAAN;;kBAIOqB,MAAT,EAAiB,KAAKL,MAAtB,EAA8B,KAAKI,KAAnC,EAA0C,KAA1C;aAGOT,IAAP;;;;2BAWKlB,aAAU4B,QAAQT,YAA+B;UAAnBU,aAAmB,uEAAH,CAAG;UAClD,EAAE7B,eAAY4B,MAAZ,IAAsBT,UAAxB,CAAJ,EAAyC;cACjC,IAAIZ,KAAJ,CAAU,6EAAV,CAAN;;UAGE,EAAEP,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,iDAAV,CAAN;;WAIGoB,KAAL,GAAa3B,YAAS4B,MAAT,EAAiBC,aAAjB,EAAgC,KAAhC,CAAb;WACKN,MAAL,GAAcM,gBAAgBV,UAA9B;aAGO,KAAKI,MAAZ;;;;;;ICzDiBO;;uBAKPH,KAAZ,EAAmB;;QACbA,SAAS,CAAClD,MAAMkD,KAAN,CAAd,EAA4B;YACpB,IAAIpB,KAAJ,CAAU,0DAAV,CAAN;;oHAGIoB,KALW;;;;2BAYZ;2HACa,UAAlB,EAA8B,CAA9B;;;;2BASK3B,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;6HACd7B,WAApB,EAA8B,UAA9B,EAA0C,CAA1C,EAA6C6B,aAA7C;;;;EA5BqCH;;ICApBK;;yBAKPJ,KAAZ,EAAmB;;QACbA,SAAS,CAAC/C,QAAQ+C,KAAR,CAAd,EAA8B;YACtB,IAAIpB,KAAJ,CAAU,2DAAV,CAAN;;wHAGIoB,KALW;;;;2BAYZ;+HACa,YAAlB,EAAgC,CAAhC;;;;2BASK3B,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;iIACd7B,WAApB,EAA8B,YAA9B,EAA4C,CAA5C,EAA+C6B,aAA/C;;;;EA5BuCH;;ACF3C,IAAMM,iBAAiB,KAAvB;AAGA,IAAMC,eAAe,OAArB;AAOA,SAASC,iBAAT,CAA2BC,SAA3B,EAAsC;MAEhCxC,YAAY,QAAZ,CAAJ,EAA2B;WAClByC,OAAOC,IAAP,CAAYF,SAAZ,EAAuBlD,QAAvB,CAAgCgD,YAAhC,CAAP;GADF,MAEO,IAAItC,YAAY,aAAZ,CAAJ,EAAgC;WAC9B,IAAI2C,WAAJ,CAAgBL,YAAhB;KACJM,MADI,CACG,IAAIC,SAAJ,CAAcL,SAAd,CADH,CAAP;;MAKErB,MAAM,EAAV;OAEK,IAAI2B,IAAI,CAAb,EAAgBA,IAAIN,UAAUxB,MAA9B,EAAsC8B,KAAKT,cAA3C,EAA2D;WAClDU,OAAOC,YAAP,CAAoBC,KAApB,CACL,IADK,EAELT,UAAUvB,KAAV,CAAgB6B,CAAhB,EAAmBA,IAAIT,cAAvB,CAFK,CAAP;;SAMKlB,GAAP;;IAMmB+B;;wBAKPlB,KAAZ,EAAmB;;QACbA,SAAS,CAAC9C,SAAS8C,KAAT,CAAd,EAA+B;YACvB,IAAIpB,KAAJ,CAAU,2DAAV,CAAN;;sHAGIoB,KALW;;;;2BAYZ;UACDlC,YAAY,KAAKkC,KAAjB,CAAJ,EAA6B;cACrB,IAAIpB,KAAJ,CAAU,sDAAV,CAAN;;UAIIuC,aAAgB,KAAKnB,KAArB,OAAN;UACMR,aAAazB,IAAIoD,WAAWnC,MAAf,CAAnB;UAEMT,SAAS,IAAIZ,UAAJ,CAAe6B,UAAf,CAAf;WAEK,IAAIsB,IAAI,CAAb,EAAgBA,IAAIK,WAAWnC,MAA/B,EAAuC8B,KAAK,CAA5C,EAA+C;eACtCA,CAAP,IAAYK,WAAWC,UAAX,CAAsBN,CAAtB,CAAZ;;aAGKvC,MAAP;;;;2BASKF,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,uDAAV,CAAN;;UAGEgB,SAASM,aAAb;UACImB,iBAAJ;UACMb,YAAY,EAAlB;aAEOZ,SAASvB,YAASmB,UAAzB,EAAqCI,UAAU,CAA/C,EAAkD;mBACrCvB,YAASiD,QAAT,CAAkB1B,MAAlB,CAAX;YAGIyB,aAAa,CAAjB,EAAoB;oBACR3B,IAAV,CAAe2B,QAAf;SADF,MAEO;oBACK,CAAV;;;;UAKAzB,WAAWvB,YAASW,MAAxB,EAAgC;cACxB,IAAIJ,KAAJ,CAAU,+CAAV,CAAN;;WAIGgB,MAAL,GAAc7B,IAAI6B,MAAJ,CAAd;WAEKI,KAAL,GAAaO,kBAAkBC,SAAlB,CAAb;aAEO,KAAKZ,MAAZ;;;;EAvEsCG;;ICjCrBwB;;sBAKPvB,KAAZ,EAAmB;;QACbA,SAAS,CAACtC,OAAOsC,KAAP,CAAd,EAA6B;YACrB,IAAIpB,KAAJ,CAAU,6DAAV,CAAN;;kHAGIoB,KALW;;;;2BAYZ;UACDlC,YAAY,KAAKkC,KAAjB,CAAJ,EAA6B;cACrB,IAAIpB,KAAJ,CAAU,oDAAV,CAAN;;UAGIY,aAAazB,IAAI,KAAKiC,KAAL,CAAWR,UAAf,CAAnB;UACMD,OAAO,IAAI5B,UAAJ,CAAe6B,aAAa,CAA5B,CAAb;UACMnB,cAAW,IAAIG,QAAJ,CAAae,KAAKhB,MAAlB,CAAjB;kBAGSiD,QAAT,CAAkB,CAAlB,EAAqB,KAAKxB,KAAL,CAAWR,UAAhC,EAA4C,KAA5C;WAEKM,GAAL,CAAS,KAAKE,KAAd,EAAqB,CAArB;aAEOT,IAAP;;;;2BASKlB,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,qDAAV,CAAN;;UAGIY,aAAanB,YAASoD,QAAT,CAAkBvB,aAAlB,EAAiC,KAAjC,CAAnB;WAGKF,KAAL,GAAa,IAAIrC,UAAJ,CAAeU,YAASE,MAAxB,EAAgC2B,gBAAgB,CAAhD,EAAmDV,UAAnD,CAAb;WAEKI,MAAL,GAAc7B,IAAImC,gBAAgB,CAAhB,GAAoBV,UAAxB,CAAd;aAEO,KAAKI,MAAZ;;;;EApDoCG;;ICanB2B;qBAYE;;SAKd9B,MAAL,GAAc,CAAd;SAEKd,OAAL,GAAe,EAAf;SAEK6C,KAAL,GAAa,EAAb;SAEKC,IAAL,GAAY,EAAZ;sCAXaA,IAAM;UAAA;;QAafA,KAAK5C,MAAL,GAAc,CAAlB,EAAqB;UACf,EAAE9B,SAAS0E,KAAK,CAAL,CAAT,KAAqBzE,QAAQyE,KAAK,CAAL,CAAR,CAAvB,CAAJ,EAA8C;cACtC,IAAIhD,KAAJ,CAAU,4EAAV,CAAN;;WAGGE,OAAL,GAAeD,eAAe+C,KAAKC,KAAL,EAAf,CAAf;WACKF,KAAL,GAAaC,KAAKE,GAAL,CAAS;eAAQpD,QAAQC,IAAR,CAAR;OAAT,EAAgCI,IAAhC,CAAqC,EAArC,CAAb;WACK6C,IAAL,GAAYA,IAAZ;;;;;wBAQAjD,MAAM;UACJb,YAAYa,IAAZ,CAAJ,EAAuB;cACf,IAAIC,KAAJ,CAAU,gDAAV,CAAN;;WAGGgD,IAAL,CAAUlC,IAAV,CAAef,IAAf;WACKgD,KAAL,IAAcjD,QAAQC,IAAR,CAAd;;;;2BAOK;UACD,KAAKG,OAAL,CAAaE,MAAb,KAAwB,CAAxB,IAA6B,KAAKF,OAAL,CAAa,CAAb,MAAoB,GAArD,EAA0D;cAClD,IAAIF,KAAJ,CAAU,oCAAV,CAAN;;UAGImD,UAAU,IAAIC,YAAJ,EAAhB;cAGQC,GAAR,CAAY,IAAIf,YAAJ,CAAiB,KAAKpC,OAAtB,CAAZ;cACQmD,GAAR,CAAY,IAAIf,YAAJ,OAAqB,KAAKS,KAA1B,CAAZ;UAGI,KAAKC,IAAL,CAAU5C,MAAV,GAAmB,CAAvB,EAA0B;YACpBkD,iBAAJ;aAEKN,IAAL,CAAU/B,OAAV,CAAkB,UAACG,KAAD,EAAW;cACvBlD,MAAMkD,KAAN,CAAJ,EAAkB;uBACL,IAAIG,WAAJ,CAAgBH,KAAhB,CAAX;WADF,MAEO,IAAI/C,QAAQ+C,KAAR,CAAJ,EAAoB;uBACd,IAAII,aAAJ,CAAkBJ,KAAlB,CAAX;WADK,MAEA,IAAI9C,SAAS8C,KAAT,CAAJ,EAAqB;uBACf,IAAIkB,YAAJ,CAAiBlB,KAAjB,CAAX;WADK,MAEA,IAAItC,OAAOsC,KAAP,CAAJ,EAAmB;uBACb,IAAIuB,UAAJ,CAAevB,KAAf,CAAX;WADK,MAEA;kBACC,IAAIpB,KAAJ,CAAU,yCAAV,CAAN;;kBAGMqD,GAAR,CAAYC,QAAZ;SAbF;;aAiBKH,QAAQI,KAAR,EAAP;;;;2BASK9D,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,mDAAV,CAAN;;UAIIE,UAAU,IAAIoC,YAAJ,EAAhB;cACQkB,MAAR,CAAe/D,WAAf,EAAyB6B,aAAzB;UAGMyB,QAAQ,IAAIT,YAAJ,EAAd;YACMkB,MAAN,CAAa/D,WAAb,EAAuBS,QAAQc,MAA/B;UAEId,QAAQkB,KAAR,CAAchB,MAAd,KAAyB,CAAzB,IAA8BF,QAAQkB,KAAR,CAAc,CAAd,MAAqB,GAAvD,EAA4D;cACpD,IAAIpB,KAAJ,CAAU,uDAAV,CAAN;;UAGE+C,MAAM3B,KAAN,CAAYhB,MAAZ,KAAuB,CAAvB,IAA4B2C,MAAM3B,KAAN,CAAY,CAAZ,MAAmB,GAAnD,EAAwD;cAChD,IAAIpB,KAAJ,CAAU,oDAAV,CAAN;;UAGIgB,MArB4B,GAqBjB+B,KArBiB,CAqB5B/B,MArB4B;UAsB9ByC,aAAJ;UACIC,aAAJ;UAEMV,OAAO,EAAb;WAGK,IAAId,IAAI,CAAb,EAAgBA,IAAIa,MAAM3B,KAAN,CAAYhB,MAAhC,EAAwC8B,KAAK,CAA7C,EAAgD;eACvCa,MAAM3B,KAAN,CAAYc,CAAZ,CAAP;YAEIwB,SAAS,GAAb,EAAkB;iBACT,IAAInC,WAAJ,EAAP;SADF,MAEO,IAAImC,SAAS,GAAb,EAAkB;iBAChB,IAAIlC,aAAJ,EAAP;SADK,MAEA,IAAIkC,SAAS,GAAb,EAAkB;iBAChB,IAAIpB,YAAJ,EAAP;SADK,MAEA,IAAIoB,SAAS,GAAb,EAAkB;iBAChB,IAAIf,UAAJ,EAAP;SADK,MAEA;gBACC,IAAI3C,KAAJ,CAAU,8CAAV,CAAN;;iBAGOyD,KAAKD,MAAL,CAAY/D,WAAZ,EAAsBuB,MAAtB,CAAT;aACKF,IAAL,CAAU2C,KAAKrC,KAAf;;WAGGJ,MAAL,GAAcA,MAAd;WACKd,OAAL,GAAeA,QAAQkB,KAAvB;WACK2B,KAAL,GAAaA,MAAM3B,KAAnB;WACK4B,IAAL,GAAYA,IAAZ;aAEO,KAAKhC,MAAZ;;;;;;ACjKG,IAAM2C,mBAAmB,UAAzB;AAEP,AAAO,IAAMC,eAAe,UAArB;AAMP,IAAaC,OAAb;qBAM0C;QAA5BC,OAA4B,uEAAlB,CAAkB;QAAfC,SAAe,uEAAH,CAAG;;QAClC,EAAE7F,MAAM4F,OAAN,KAAkB5F,MAAM6F,SAAN,CAApB,CAAJ,EAA2C;YACnC,IAAI/D,KAAJ,CAAU,+DAAV,CAAN;;SAIG8D,OAAL,GAAeA,OAAf;SAEKC,SAAL,GAAiBA,SAAjB;;;;8BASQC,YAvBZ,EAuB0B;UAClBF,gBAAJ;UAEI,OAAOE,YAAP,KAAwB,QAA5B,EAAsC;kBAC1BA,eAAe,IAAzB;YACMC,UAAUC,KAAKC,KAAL,CAAWL,OAAX,CAAhB;aAEKA,OAAL,GAAeG,UAAUN,gBAAzB;aACKI,SAAL,GAAiBG,KAAKE,KAAL,CAAWR,gBAAgBE,UAAUG,OAA1B,CAAX,CAAjB;eAEOD,YAAP;;gBAGQ,KAAKF,OAAL,GAAeH,gBAAzB;aACO,CAACG,UAAUI,KAAKE,KAAL,CAAW,KAAKL,SAAL,GAAiBH,YAA5B,CAAX,IAAwD,IAA/D;;;;;IAQiBS;;2BAMa;QAApBjD,KAAoB,uEAAZnC,KAAKqF,GAAL,EAAY;;QAC1BC,UAAU,IAAIV,OAAJ,EAAd;QAEIzC,iBAAiByC,OAArB,EAA8B;gBAClBzC,KAAV;KADF,MAEO,IAAIlD,MAAMkD,KAAN,CAAJ,EAAkB;cACfoD,SAAR,CAAkBpD,KAAlB;KADK,MAEA,IAAIpC,OAAOoC,KAAP,CAAJ,EAAmB;cAChBoD,SAAR,CAAkBpD,MAAMqD,OAAN,EAAlB;;wHAGIF,OAXwB;;;;2BAkBzB;UACDrF,YAAY,KAAKkC,KAAjB,CAAJ,EAA6B;cACrB,IAAIpB,KAAJ,CAAU,uDAAV,CAAN;;mBAG6B,KAAKoB,KAL/B;UAKG0C,OALH,UAKGA,OALH;UAKYC,SALZ,UAKYA,SALZ;UAMCpD,OAAO,IAAI5B,UAAJ,CAAe,CAAf,CAAb;UACMU,cAAW,IAAIG,QAAJ,CAAae,KAAKhB,MAAlB,CAAjB;kBAESiD,QAAT,CAAkB,CAAlB,EAAqBkB,OAArB,EAA8B,KAA9B;kBACSlB,QAAT,CAAkB,CAAlB,EAAqBmB,SAArB,EAAgC,KAAhC;aAEOpD,IAAP;;;;2BASKlB,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,wDAAV,CAAN;;UAGI8D,UAAUrE,YAASiF,SAAT,CAAmBpD,aAAnB,EAAkC,KAAlC,CAAhB;UACMyC,YAAYtE,YAASiF,SAAT,CAAmBpD,gBAAgB,CAAnC,EAAsC,KAAtC,CAAlB;WAGKF,KAAL,GAAa,IAAIyC,OAAJ,CAAYC,OAAZ,EAAqBC,SAArB,CAAb;WAEK/C,MAAL,GAAcM,gBAAgB,CAA9B;aAEO,KAAKN,MAAZ;;;;EA1DuCG;;AChDpC,IAAMwD,aAAa,SAAnB;IAMcC;oBAiBE;;;SAKd5D,MAAL,GAAc,CAAd;SAEKuD,OAAL,GAAe,IAAIF,aAAJ,EAAf;SAEKQ,cAAL,GAAsB,EAAtB;sCATa7B,IAAM;UAAA;;QAWfA,KAAK5C,MAAL,GAAc,CAAlB,EAAqB;UAEf4C,KAAK,CAAL,aAAmB/D,IAAnB,IAA2Bf,MAAM8E,KAAK,CAAL,CAAN,CAA/B,EAA+C;aACxCuB,OAAL,GAAe,IAAIF,aAAJ,CAAkBrB,KAAK,CAAL,CAAlB,CAAf;OADF,MAEO,IAAIzE,QAAQyE,KAAK,CAAL,CAAR,CAAJ,EAAsB;aAEtB,CAAL,EAAQ/B,OAAR,CAAgB,UAAClB,IAAD,EAAU;gBACnBsD,GAAL,CAAStD,IAAT;SADF;YAKIiD,KAAK5C,MAAL,GAAc,CAAd,KAAoB4C,KAAK,CAAL,aAAmB/D,IAAnB,IAA2Bf,MAAM8E,KAAK,CAAL,CAAN,CAA/C,CAAJ,EAAoE;eAC7DuB,OAAL,GAAe,IAAIF,aAAJ,CAAkBrB,KAAK,CAAL,CAAlB,CAAf;;OARG,MAUA;aAEA/B,OAAL,CAAa,UAAClB,IAAD,EAAU;gBAChBsD,GAAL,CAAStD,IAAT;SADF;;;;;;8BAeI+E,IAAI;UACR,CAAC5G,MAAM4G,EAAN,CAAL,EAAgB;cACR,IAAI9E,KAAJ,CAAU,uDAAV,CAAN;;WAGGuE,OAAL,GAAe,IAAIF,aAAJ,CAAkBS,EAAlB,CAAf;;;;wBAOE/E,MAAM;UACJ,EAAEA,gBAAgB+C,OAAhB,IAA2B/C,gBAAgB6E,MAA7C,CAAJ,EAA0D;cAClD,IAAI5E,KAAJ,CAAU,+CAAV,CAAN;;WAGG6E,cAAL,CAAoB/D,IAApB,CAAyBf,IAAzB;;;;2BAOK;UACCoD,UAAU,IAAIzC,YAAJ,EAAhB;cAGQ2C,GAAR,CAAY,IAAIf,YAAJ,CAAiBqC,UAAjB,CAAZ;UAGI,CAAC,KAAKJ,OAAV,EAAmB;aACZA,OAAL,GAAe,IAAIF,aAAJ,EAAf;;cAGMhB,GAAR,CAAY,KAAKkB,OAAjB;WAGKM,cAAL,CAAoB5D,OAApB,CAA4B,UAAClB,IAAD,EAAU;gBAC5BsD,GAAR,CAAY,IAAI9B,WAAJ,CAAgBxB,KAAKc,IAAL,GAAYD,UAA5B,CAAZ;gBACQyC,GAAR,CAAYtD,IAAZ;OAFF;aAKOoD,QAAQI,KAAR,EAAP;;;;2BASK9D,aAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,uBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,iDAAV,CAAN;;UAII+E,OAAO,IAAIzC,YAAJ,EAAb;WACKkB,MAAL,CAAY/D,WAAZ,EAAsB6B,aAAtB;UAEIyD,KAAK3D,KAAL,KAAeuD,UAAnB,EAA+B;cACvB,IAAI3E,KAAJ,CAAU,kDAAV,CAAN;;UAIIuE,UAAU,IAAIF,aAAJ,EAAhB;UACIrD,SAASuD,QAAQf,MAAR,CAAe/D,WAAf,EAAyBsF,KAAK/D,MAA9B,CAAb;WAGK6D,cAAL,GAAsB,EAAtB;aAEO7D,SAASvB,YAASmB,UAAzB,EAAqC;YAC7BoE,SAAS,IAAIC,MAAJ,EAAf;YACMC,OAAO,IAAI3D,WAAJ,EAAb;iBAES2D,KAAK1B,MAAL,CAAY/D,WAAZ,EAAsBuB,MAAtB,CAAT;iBACSgE,OAAOxB,MAAP,CAAc/D,WAAd,EAAwBuB,MAAxB,EAAgC,KAAKuD,OAArC,CAAT;aAEKM,cAAL,CAAoB/D,IAApB,CAAyBkE,OAAO5D,KAAhC;;WAGGJ,MAAL,GAAcA,MAAd;WACKuD,OAAL,GAAeA,OAAf;aAEO,KAAKvD,MAAZ;;;;;;ICxJiBiE;kBAKP7D,KAAZ,EAAmB;;QACbA,SAAS,EAAEA,iBAAiB0B,OAAjB,IAA4B1B,iBAAiBwD,MAA/C,CAAb,EAAqE;YAC7D,IAAI5E,KAAJ,CAAU,8CAAV,CAAN;;SAIGoB,KAAL,GAAaA,KAAb;SAKKJ,MAAL,GAAc,CAAd;;;;2BAiBK;UACD,CAAC,KAAKI,KAAV,EAAiB;cACT,IAAIpB,KAAJ,CAAU,+CAAV,CAAN;;aAGK,KAAKoB,KAAL,CAAWP,IAAX,EAAP;;;;2BASKpB,UAA6B;UAAnB6B,aAAmB,uEAAH,CAAG;UAC9B,EAAE7B,oBAAoBG,QAAtB,CAAJ,EAAqC;cAC7B,IAAII,KAAJ,CAAU,iDAAV,CAAN;;UAGEP,SAASmB,UAAT,GAAsB,CAAtB,KAA4B,CAAhC,EAAmC;cAC3B,IAAIZ,KAAJ,CAAU,oDAAV,CAAN;;UAGI+E,OAAO,IAAIzC,YAAJ,EAAb;WACKkB,MAAL,CAAY/D,QAAZ,EAAsB6B,aAAtB;UAEIvB,aAAJ;UAGIgF,KAAK3D,KAAL,KAAeuD,UAAnB,EAA+B;eACtB,IAAIC,MAAJ,EAAP;OADF,MAEO;eACE,IAAI9B,OAAJ,EAAP;;WAGGU,MAAL,CAAY/D,QAAZ,EAAsB6B,aAAtB;WAEKN,MAAL,GAAcjB,KAAKiB,MAAnB;WACKI,KAAL,GAAarB,IAAb;aAEO,KAAKiB,MAAZ;;;;;;ACtEJ,IAAMmE,mBAAiB;uBACA;CADvB;IAQqBC;wBAKPC,OAAZ,EAAqB;;SAKdA,OAAL,GAAe7G,OAAO8G,MAAP,CAAc,EAAd,EAAkBH,gBAAlB,EAAkCE,OAAlC,CAAf;SAKKE,eAAL,GAAuB,EAAvB;SAKKC,aAAL,GAAqB;YACb,EADa;aAEZ,EAFY;aAGZ;KAHT,CASA,KAAKC,IAAL,GAAY,CAAZ;;;;6BAUOT,QAAQ;;UACX,EAAEA,kBAAkBC,MAApB,CAAJ,EAAiC;cACzB,IAAIjF,KAAJ,CAAU,kEAAV,CAAN;;UAGE,CAACgF,OAAO5D,KAAZ,EAAmB;cACX,IAAIpB,KAAJ,CAAU,sDAAV,CAAN;;UAGEgF,OAAO5D,KAAP,YAAwBwD,MAA5B,EAAoC;YAC5Bc,SAASV,OAAO5D,KAAtB;eAEOsE,OAAOb,cAAP,CAAsB5D,OAAtB,CAA8B,UAAC0E,UAAD,EAAgB;cAC/CA,sBAAsBf,MAA1B,EAAkC;gBAC5Bc,OAAOnB,OAAP,CAAenD,KAAf,CAAqBoD,SAArB,KAAmCmB,WAAWpB,OAAX,CAAmBnD,KAAnB,CAAyBoD,SAAzB,EAAvC,EAA6E;oBACrE,IAAIxE,KAAJ,CAAU,sEAAV,CAAN;;mBAEK,MAAK4F,QAAL,CAAcD,UAAd,CAAP;WAJF,MAKO,IAAIA,sBAAsB7C,OAA1B,EAAmC;gBAClC+C,UAAUF,UAAhB;mBACO,MAAKG,MAAL,CACLD,QAAQ3F,OADH,EAEL2F,OAFK,EAGLH,OAAOnB,OAAP,CAAenD,KAAf,CAAqBoD,SAArB,EAHK,CAAP;;gBAOI,IAAIxE,KAAJ,CAAU,iEAAV,CAAN;SAfK,CAAP;OAHF,MAoBO,IAAIgF,OAAO5D,KAAP,YAAwB0B,OAA5B,EAAqC;YACpC+C,UAAUb,OAAO5D,KAAvB;eACO,KAAK0E,MAAL,CAAYD,QAAQ3F,OAApB,EAA6B2F,OAA7B,CAAP;;YAGI,IAAI7F,KAAJ,CAAU,iEAAV,CAAN;;;;yBAWGX,MAAMsB,MAAM;UACXoF,UAAU,KAAd;UAGIzH,SAASe,IAAT,KAAkBA,QAAQ,KAAKmG,aAAnC,EAAkD;aAC3CA,aAAL,CAAmBnG,IAAnB,EAAyB4B,OAAzB,CAAiC,UAAC+E,OAAD,EAAa;kBACpCC,QAAR,CAAiBtF,IAAjB;oBACU,IAAV;SAFF;eAKOoF,OAAP;;UAIIG,cAAc1H,OAAO2H,IAAP,CAAY,KAAKZ,eAAjB,CAApB;UACMa,WAAW,KAAKb,eAAtB;kBAEYtE,OAAZ,CAAoB,UAACoF,GAAD,EAAS;YACrBC,QAAQ,IAAIC,MAAJ,CAAWjG,oBAAoBL,eAAeZ,IAAf,CAApB,CAAX,EAAsD,GAAtD,CAAd;YACMmH,OAAOF,MAAME,IAAN,CAAWH,GAAX,CAAb;YAGIG,QAAQH,IAAIjG,MAAJ,KAAekG,MAAMG,SAAjC,EAA4C;mBACjCJ,GAAT,EAAcpF,OAAd,CAAsB,UAAC+E,OAAD,EAAa;oBACzBC,QAAR,CAAiBtF,IAAjB;sBACU,IAAV;WAFF;;OANJ;aAaOoF,OAAP;;;;6BAsCc;wCAAN/C,IAAM;YAAA;;UACVA,KAAK5C,MAAL,KAAgB,CAApB,EAAuB;cACf,IAAIJ,KAAJ,CAAU,yDAAV,CAAN;;UAIEgD,KAAK,CAAL,aAAmBiC,MAAvB,EAA+B;eACtB,KAAKW,QAAL,CAAc5C,KAAK,CAAL,CAAd,CAAP;OADF,MAEO,IAAIA,KAAK,CAAL,aAAmB4B,MAAnB,IAA6B5B,KAAK,CAAL,aAAmBF,OAApD,EAA6D;eAC3D,KAAK8C,QAAL,CAAc,IAAIX,MAAJ,CAAWjC,KAAK,CAAL,CAAX,CAAd,CAAP;OADK,MAEA,IAAI,CAAC1E,SAAS0E,KAAK,CAAL,CAAT,CAAL,EAAwB;YACvBgC,SAAS,IAAIC,MAAJ,EAAf;eACOzB,MAAP,CAAc/D,SAASuD,KAAK,CAAL,CAAT,CAAd;eACO,KAAK4C,QAAL,CAAcZ,MAAd,CAAP;;UAGI3F,OAAO2D,KAAK,CAAL,CAAb;UAGIrC,OAAO,IAAX;UAEIqC,KAAK5C,MAAL,GAAc,CAAlB,EAAqB;eACZ4C,KAAK,CAAL,CAAP;;UAIEwB,YAAY,IAAhB;UAEIxB,KAAK5C,MAAL,GAAc,CAAlB,EAAqB;YACflC,MAAM8E,KAAK,CAAL,CAAN,CAAJ,EAAoB;sBACNA,KAAK,CAAL,CAAZ;SADF,MAEO,IAAIA,KAAK,CAAL,aAAmB/D,IAAvB,EAA6B;sBACtB+D,KAAK,CAAL,EAAQyB,OAAR,EAAZ;SADK,MAEA;gBACC,IAAIzE,KAAJ,CAAU,uDAAV,CAAN;;;UAKAwE,SAAJ,EAAe;YACPF,MAAMrF,KAAKqF,GAAL,EAAZ;YAGIA,MAAME,SAAV,EAAqB;cACf,CAAC,KAAKa,OAAL,CAAaqB,mBAAlB,EAAuC;mBAC9B,KAAK/H,IAAL,CAAUU,IAAV,EAAgBsB,IAAhB,CAAP;;;YAKEgG,OAAO,IAAb;mBAEW,YAAM;eACVhI,IAAL,CAAUU,IAAV,EAAgBsB,IAAhB;SADF,EAEG6D,YAAYF,GAFf;eAIO,IAAP;;aAGK,KAAK3F,IAAL,CAAUU,IAAV,EAAgBsB,IAAhB,CAAP;;;;uBASCtB,MAAM4G,UAAU;UACb,EAAE3H,SAASe,IAAT,KAAkBd,QAAQc,IAAR,CAApB,CAAJ,EAAwC;cAChC,IAAIW,KAAJ,CAAU,sEAAV,CAAN;;UAGE,CAACnB,WAAWoH,QAAX,CAAL,EAA2B;cACnB,IAAIjG,KAAJ,CAAU,gDAAV,CAAN;;WAIGyF,IAAL,IAAa,CAAb;UAGMO,UAAU;YACV,KAAKP,IADK;;OAAhB,CAMA,IAAInH,SAASe,IAAT,KAAkBA,QAAQ,KAAKmG,aAAnC,EAAkD;aAC3CA,aAAL,CAAmBnG,IAAnB,EAAyByB,IAAzB,CAA8BkF,OAA9B;eACO,KAAKP,IAAZ;;UAIIvF,UAAUD,eAAeZ,IAAf,CAAhB;UACMiH,QAAQ,IAAIC,MAAJ,CAAW,kBAAX,CAAd;UAEID,MAAME,IAAN,CAAWtG,QAAQ0G,KAAR,CAAc,GAAd,EAAmBzG,IAAnB,CAAwB,EAAxB,CAAX,CAAJ,EAA6C;cACrC,IAAIH,KAAJ,CAAU,6DAAV,CAAN;;UAGE,EAAEE,WAAW,KAAKqF,eAAlB,CAAJ,EAAwC;aACjCA,eAAL,CAAqBrF,OAArB,IAAgC,EAAhC;;WAGGqF,eAAL,CAAqBrF,OAArB,EAA8BY,IAA9B,CAAmCkF,OAAnC;aAEO,KAAKP,IAAZ;;;;wBASEpG,MAAMwH,gBAAgB;UACpB,EAAEvI,SAASe,IAAT,KAAkBd,QAAQc,IAAR,CAApB,CAAJ,EAAwC;cAChC,IAAIW,KAAJ,CAAU,sEAAV,CAAN;;UAGE,CAAC9B,MAAM2I,cAAN,CAAL,EAA4B;cACpB,IAAI7G,KAAJ,CAAU,qDAAV,CAAN;;UAGEqG,YAAJ;UACIS,iBAAJ;UAGIxI,SAASe,IAAT,KAAkBA,QAAQ,KAAKmG,aAAnC,EAAkD;cAC1CnG,IAAN;mBACW,KAAKmG,aAAhB;OAFF,MAGO;cACCvF,eAAeZ,IAAf,CAAN;mBACW,KAAKkG,eAAhB;;UAIEc,OAAOS,QAAX,EAAqB;eACZA,SAAST,GAAT,EAAcU,IAAd,CAAmB,UAAChH,IAAD,EAAOiH,KAAP,EAAiB;cACrCjH,KAAKkH,EAAL,KAAYJ,cAAhB,EAAgC;qBACrBR,GAAT,EAAca,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;mBACO,IAAP;;iBAGK,KAAP;SANK,CAAP;;aAUK,KAAP;;;;;;ACnTJ,IAAM7B,mBAAiB;UACb,IADa;uBAEA;CAFvB,CAQA,IAAMgC,SAAS;sBACO,CAAC,CADR;iBAEE,CAFF;WAGJ,CAHI;cAID,CAJC;aAKF;CALb;IA6BMC;eAqBQ/B,OAAZ,EAAqB;;QACfA,WAAW,CAACzG,SAASyG,OAAT,CAAhB,EAAmC;YAC3B,IAAIrF,KAAJ,CAAU,2CAAV,CAAN;;SAOGqF,OAAL,GAAe7G,OAAO8G,MAAP,CAAc,EAAd,EAAkBH,gBAAlB,EAAkCE,OAAlC,CAAf;SAKKgC,YAAL,GAAoB,IAAIjC,YAAJ,CAAiB;2BACd,KAAKC,OAAL,CAAaqB;KADhB,CAApB;QAKQW,YAnBW,GAmBM,IAnBN,CAmBXA,YAnBW;QAoBf,KAAKhC,OAAL,CAAaiC,MAAb,IAAuB,KAAKjC,OAAL,CAAaiC,MAAb,CAAoBC,cAA/C,EAA+D;WACxDlC,OAAL,CAAaiC,MAAb,CAAoBC,cAApB,CAAmC;eAAaF,aAAavB,MAAb,+BAAb;OAAnC;;;;;uBAuBD0B,WAAWvB,UAAU;UAClB,EAAE3H,SAASkJ,SAAT,KAAuB3I,WAAWoH,QAAX,CAAzB,CAAJ,EAAoD;cAC5C,IAAIjG,KAAJ,CAAU,+DAAV,CAAN;;aAGK,KAAKqH,YAAL,CAAkBI,EAAlB,CAAqBD,SAArB,EAAgCvB,QAAhC,CAAP;;;;wBAeEuB,WAAWX,gBAAgB;UACzB,EAAEvI,SAASkJ,SAAT,KAAuBtJ,MAAM2I,cAAN,CAAzB,CAAJ,EAAqD;cAC7C,IAAI7G,KAAJ,CAAU,mEAAV,CAAN;;aAGK,KAAKqH,YAAL,CAAkBK,GAAlB,CAAsBF,SAAtB,EAAiCX,cAAjC,CAAP;;;;yBAYGxB,SAAS;UACRA,WAAW,CAACzG,SAASyG,OAAT,CAAhB,EAAmC;cAC3B,IAAIrF,KAAJ,CAAU,mDAAV,CAAN;;UAGE,EAAE,KAAKqF,OAAL,CAAaiC,MAAb,IAAuBzI,WAAW,KAAKwG,OAAL,CAAaiC,MAAb,CAAoBK,IAA/B,CAAzB,CAAJ,EAAoE;cAC5D,IAAI3H,KAAJ,CAAU,0CAAV,CAAN;;aAGK,KAAKqF,OAAL,CAAaiC,MAAb,CAAoBK,IAApB,CAAyBtC,OAAzB,CAAP;;;;6BAgBO;UACH,EAAE,KAAKA,OAAL,CAAaiC,MAAb,IAAuBzI,WAAW,KAAKwG,OAAL,CAAaiC,MAAb,CAAoBM,MAA/B,CAAzB,CAAJ,EAAsE;cAC9D,IAAI5H,KAAJ,CAAU,4CAAV,CAAN;;aAGK,KAAKqF,OAAL,CAAaiC,MAAb,CAAoBM,MAApB,EAAP;;;;4BAOM;UACF,EAAE,KAAKvC,OAAL,CAAaiC,MAAb,IAAuBzI,WAAW,KAAKwG,OAAL,CAAaiC,MAAb,CAAoBO,KAA/B,CAAzB,CAAJ,EAAqE;cAC7D,IAAI7H,KAAJ,CAAU,2CAAV,CAAN;;aAGK,KAAKqF,OAAL,CAAaiC,MAAb,CAAoBO,KAApB,EAAP;;;;yBAmBG7C,QAAQK,SAAS;UAChB,EAAE,KAAKA,OAAL,CAAaiC,MAAb,IAAuBzI,WAAW,KAAKwG,OAAL,CAAaiC,MAAb,CAAoBQ,IAA/B,CAAzB,CAAJ,EAAoE;cAC5D,IAAI9H,KAAJ,CAAU,0CAAV,CAAN;;UAGE,EAAEgF,kBAAkBlC,OAAlB,IAA6BkC,kBAAkBJ,MAA/C,IAAyDI,kBAAkBC,MAA7E,CAAJ,EAA0F;cAClF,IAAIjF,KAAJ,CAAU,+CAAV,CAAN;;UAGEqF,WAAW,CAACzG,SAASyG,OAAT,CAAhB,EAAmC;cAC3B,IAAIrF,KAAJ,CAAU,iDAAV,CAAN;;aAGK,KAAKqF,OAAL,CAAaiC,MAAb,CAAoBQ,IAApB,CAAyB9C,OAAOnE,IAAP,EAAzB,EAAwCwE,OAAxC,CAAP;;;;;AAKJ+B,MAAID,MAAJ,GAAaA,MAAb;AAGAC,MAAInC,MAAJ,GAAaA,MAAb;AACAmC,MAAIxC,MAAJ,GAAaA,MAAb;AACAwC,MAAItE,OAAJ,GAAcA,OAAd,CAEA;;ACvOA,IAAMqE,WAAS;sBACO,CAAC,CADR;iBAEE,CAFF;WAGJ,CAHI;cAID,CAJC;aAKF;CALb,CAYA,IAAMhC,mBAAiB;QACf,WADe;QAEf,IAFe;UAGb;CAHV;IASqB4C;kCAaPC,aAAZ,EAA2B;;QACrB,CAAC5I,YAAY,WAAZ,CAAL,EAA+B;YACvB,IAAIY,KAAJ,CAAU,sDAAV,CAAN;;SAOGqF,OAAL,GAAe7G,OAAO8G,MAAP,CAAc,EAAd,EAAkBH,gBAAlB,EAAkC6C,aAAlC,CAAf;SAMKC,MAAL,GAAc,IAAd;SAKKC,YAAL,GAAoBf,SAAOgB,kBAA3B;SAMKrC,MAAL,GAAc,YAAM,EAApB;;;;mCASasC,IAAI;WACZtC,MAAL,GAAcsC,EAAd;;;;6BAOO;aACA,KAAKF,YAAZ;;;;2BAUuB;;UAApBF,aAAoB,uEAAJ,EAAI;UACjB3C,UAAU7G,OAAO8G,MAAP,CAAc,EAAd,EAAkB,KAAKD,OAAvB,EAAgC2C,aAAhC,CAAhB;UACQK,IAFe,GAEQhD,OAFR,CAEfgD,IAFe;UAETC,IAFS,GAEQjD,OAFR,CAETiD,IAFS;UAEHC,MAFG,GAEQlD,OAFR,CAEHkD,MAFG;UAKnB,KAAKN,MAAT,EAAiB;aACVJ,KAAL;;UAIIW,WAAWD,SAAS,KAAT,GAAiB,IAAlC;WACKN,MAAL,GAAc,IAAIQ,SAAJ,CAAiBD,QAAjB,WAA+BF,IAA/B,SAAuCD,IAAvC,CAAd,CAXuB;WAYlBJ,MAAL,CAAYS,UAAZ,GAAyB,aAAzB;WACKR,YAAL,GAAoBf,SAAOwB,aAA3B;WAGKV,MAAL,CAAYW,MAAZ,GAAqB,YAAM;cACpBV,YAAL,GAAoBf,SAAO0B,OAA3B;cACK/C,MAAL,CAAY,MAAZ;OAFF;WAKKmC,MAAL,CAAYa,OAAZ,GAAsB,YAAM;cACrBZ,YAAL,GAAoBf,SAAO4B,SAA3B;cACKjD,MAAL,CAAY,OAAZ;OAFF;WAKKmC,MAAL,CAAYe,OAAZ,GAAsB,UAACC,KAAD,EAAW;cAC1BnD,MAAL,CAAY,OAAZ,EAAqBmD,KAArB;OADF;WAIKhB,MAAL,CAAYiB,SAAZ,GAAwB,UAACrD,OAAD,EAAa;cAC9BC,MAAL,CAAYD,QAAQlF,IAApB;OADF;;;;4BAQM;WACDuH,YAAL,GAAoBf,SAAOgC,UAA3B;WACKlB,MAAL,CAAYJ,KAAZ;;;;yBAOGuB,QAAQ;WACNnB,MAAL,CAAYH,IAAZ,CAAiBsB,MAAjB;;;;;;AC1IJ,IAAMjE,iBAAiB;UACb,IAAI4C,sBAAJ;CADV;IAIMX;;eACQ/B,OAAZ,EAAqB;;oGACb7G,OAAO8G,MAAP,CAAc,EAAd,EAAkBH,cAAlB,EAAkCE,OAAlC,CADa;;;EADLgE;AAMlBjC,IAAIW,sBAAJ,GAA6BA,sBAA7B,CAEA;;;;"}